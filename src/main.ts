import { NestFactory, HttpAdapterHost } from '@nestjs/core'
import { ConfigService } from '@nestjs/config'
import { I18nValidationPipe } from 'nestjs-i18n'

import { readFileSync } from 'fs'

import { Logger } from '@/core/logger'
import { httpLogging } from '@/core/httpLogging'
import { CatchError } from '@/core/catchError'

import ApiModule from '@/app.module'

/**kh·ªüi ƒë·ªông server */
async function bootstrap() {
  // x√≥a m√†n h√¨nh console
  console.clear()

  /**ƒë·ªëi t∆∞·ª£ng logger */
  const LOGGER = new Logger()

  /**ƒë·ªëi t∆∞·ª£ng ƒë·∫°i di·ªán cho server */
  const NEST = await NestFactory.create(ApiModule, {
    // c·∫•u h√¨nh nest s·ª≠ d·ª•ng logger custom
    logger: LOGGER,
  })

  // s·ª≠a l·∫°i th√¥ng b√°o b·∫Øt l·ªói 500
  NEST.useGlobalFilters(new CatchError(NEST.get(HttpAdapterHost)))

  // c√†i ƒë·∫∑t validate to√†n b·ªô request ch·∫°y ƒë∆∞·ª£c v·ªõi i18n
  NEST.useGlobalPipes(new I18nValidationPipe({
    validateCustomDecorators: true
  }))

  /**l·∫•y config tu·ª≥ theo m√¥i tr∆∞·ªùng */
  const configService = NEST.get(ConfigService)

  // c√†i ƒë·∫∑t cors cho to√†n b·ªô request
  NEST.enableCors({
    origin: configService.get('NEST_CORS_ORIGIN') || '*',
    methods: configService.get('NEST_CORS_METHODS') || '*',
    allowedHeaders: configService.get('NEST_CORS_ALLOWED_HEADERS') || '*',
  })

  // c√†i ƒë·∫∑t global prefix lo·∫°i tr·ª´ root path
  NEST.setGlobalPrefix(
    configService.get('NEST_PREFIX') || 'v1',
    { exclude: ['/'] }
  )

  // c√†i ƒë·∫∑t logger cho m·ªçi request
  NEST.use(new httpLogging().use)

  // l·∫Øng nghe api
  await NEST.listen(configService.get('NEST_POST') || 1337)

  // hi·ªÉn th·ªã h√¨nh ·∫£nh ph·∫≠t t·ªï
  LOGGER.log(await readFileSync(`${process.cwd()}/buddha.txt`, 'utf-8'))

  // th√¥ng b√°o server ƒë√£ kh·ªüi ƒë·ªông
  LOGGER.log(`Server is running on: ${await NEST.getUrl()}`, 'üöÄ ')
}
bootstrap()